try:
    ########### --- External function --- ###########
    print("Start Program")
    import json
    from PIL import Image
    import os

    def read_config():
        with open("./assets/config.txt") as file:
            data = json.load(file)
            return data
        
    def save_config(data):
        with open("./assets/config.txt", 'w') as file:
            json.dump(data, file)

    def popupmsg(msg):
        from tkinter import messagebox
        messagebox.showinfo("Info", msg)

    def openfolder(selectOutputPath):
        os.startfile(selectOutputPath)

    def convertHeicToPng(pathphoto, pathsavefolder, filetype):
        listheic = [".heic", ".HEIC"]
        photo = pathphoto
        base_name = os.path.basename(photo)
        for h in listheic:
            checkHienintext = base_name.find(h)
            if checkHienintext != -1:
                print(f"Convert to {filetype}")
                temp_img = Image.open(photo)
                # Define the new directory
                new_dir = pathsavefolder
                png_name = base_name.replace(h, filetype)

                # Combine the new directory with the new file name
                png_photo = os.path.join(new_dir, png_name)

                # Check if the file already exists
                if os.path.exists(png_photo):
                    # If it does, append a number to the file name
                    base, ext = os.path.splitext(png_name)
                    i = 1
                    while os.path.exists(os.path.join(new_dir, f"{base}_{i}{ext}")):
                        i += 1
                    png_photo = os.path.join(new_dir, f"{base}_{i}{ext}")
                temp_img.save(png_photo)
                return base_name, ""
        print("This is not heic file")
        return base_name, "error"


    ########### --- Tkinter Designer --- ###########






    # This file was generated by the Tkinter Designer by Parth Jadhav
    # https://github.com/ParthJadhav/Tkinter-Designer

    import threading
    from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog

    ## import function
    listalltextid = []

    def addlistsuccessconvert(filename, gobotSuccess=0):
        global listalltextid
        success_textid = canvas.create_text(
            150.0,
            480.0 + gobotSuccess,
            anchor="nw",
            text=filename,
            fill="#2eb82e",
            font=("RobotoSlab SemiBold", 13 * -1)
        )
        listalltextid.append(success_textid)

    def addlistfailedconvert(filename, gobotFailed=0):
        global listalltextid
        failed_textid = canvas.create_text(
            650.0,
            480.0 + gobotFailed,
            anchor="nw",
            text=filename,
            fill="#ff0000",
            font=("RobotoSlab SemiBold", 13 * -1)
        )
        listalltextid.append(failed_textid)

    def delete_text():
        global listalltextid
        if listalltextid is not None or listalltextid != []:
            for text_id in listalltextid:
                if text_id is not None:
                    canvas.delete(text_id)
    #================================================================
    # import sys
    # sys.path.append(r"D:\Programer_eieiza\GemProject\Father_Convertfile\convertphoto")
    # from function import openfolder, read_config, save_config, convertHeicToPng, popupmsg
    from pillow_heif import register_heif_opener

    # Function to update the text item
    def updateComponent(item, map):
        canvas.itemconfig(item, **map)

    Output_file_folder = read_config()["defaultoutputfolder"]
    # print("Default_Output: ", Default_Output["defaultOutputPath"])
    listfileToConvert = []

    def SelectOutputPath():
        global Output_file_folder 
        from tkinter import filedialog
        selectOutputPath = filedialog.askdirectory()
        if selectOutputPath != "":
            save_config({"defaultoutputfolder": selectOutputPath})
            Output_file_folder = selectOutputPath

    def SelectlistFileToConvert():
        if Output_file_folder == "" or Output_file_folder is None:
            popupmsg("Please select output folder")
            return
        global listfileToConvert
        selectOutputPath = filedialog.askopenfilenames()
        if selectOutputPath != "":
            listfileToConvert = selectOutputPath
            threading.Thread(target=process_files, kwargs={'filetype': convert_type.get()}).start()


    done = threading.Event()

    def textprocessing():
        global threedotstext 
        threedots = 0
        threedotstext = ""
        while not done.is_set():  # Check if the 'done' event is set
            if threedots == 0:
                threedotstext = ". "
                threedots = 1
            elif threedots == 1:
                threedotstext = ". . "
                threedots = 2
            elif threedots == 2:
                threedotstext = ". . ."
                threedots = 0

    def process_files(filetype):
        delete_text()
        register_heif_opener()
        count = 0
        countsuccess = 0
        countfailed = 0
        # Start the textprocessing function in a separate thread
        threading.Thread(target=textprocessing).start()
        for i in listfileToConvert:
            basename, err = convertHeicToPng(pathphoto=i, pathsavefolder=Output_file_folder, filetype=filetype)
            filename = Path(i).name
            updateComponent(progressStatustext, {'text': f"Processing {threedotstext} {count} / {len(listfileToConvert)}", 'fill': '#ffff00'})
            updateComponent(FileConvertingText, {'text': f"File to Convert : {filename}"})
            if err == "error":
                addlistfailedconvert(basename, gobotFailed=countfailed*20)
                countfailed += 1
            else: 
                addlistsuccessconvert(basename, gobotSuccess=countsuccess*20)
                countsuccess += 1
            count += 1
        # Set the 'done' event to signal the textprocessing function to stop
        done.set()
        updateComponent(progressStatustext, {'text': f"Process : DONE", 'fill': '#00ff00'})
        
    # # ---------------------- GUI DEFINITIONS ---------------------- #
    # OUTPUT_PATH = Path(__file__).parent
    # ASSETS_PATH = OUTPUT_PATH / Path(r"D:\Programer_eieiza\GemProject\Father_Convertfile\convertphoto\build\assets\frame0")


    # def relative_to_assets(path: str) -> Path:
    #     return ASSETS_PATH / Path(path)

    from pathlib import Path

    # ---------------------- GUI DEFINITIONS ---------------------- #
    OUTPUT_PATH = Path(__file__).parent
    # ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"
    ASSETS_PATH = "./assets/frame0"
    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    window = Tk()

    window.geometry("950x700")
    window.configure(bg = "#FFFFFF")


    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 700,
        width = 950,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        475.0,
        47.0,
        image=image_image_1
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        473.0,
        410.0,
        image=image_image_2
    )

    # Create the text item with a static string
    progressStatustext = canvas.create_text(
        413.0,
        400.0,
        anchor="nw",
        text="ACTIVE",
        fill="#00ff00",
        font=("RobotoSlab SemiBold", 13 * -1)
    )



    # Call update_text whenever listfileToConvert changes


    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=SelectlistFileToConvert,
        relief="flat"
    )
    button_1.place(
        x=287.0,
        y=270.0,
        width=352.0,
        height=80.0
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        229.0,
        47.0,
        image=image_image_3
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=SelectOutputPath,
        relief="flat"
    )
    button_2.place(
        x=717.0,
        y=26.0,
        width=208.0,
        height=41.04547119140625
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: openfolder(Output_file_folder),
        relief="flat"
    )
    button_3.place(
        x=534.0,
        y=26.0,
        width=160.0,
        height=41.0
    )


    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        473.0,
        440.0,
        image=image_image_4
    )
    # Create the text item with a static string
    FileConvertingText = canvas.create_text(
        277.0,
        433.0,
        anchor="nw",
        text="File to Convert : ",
        fill="#000000",
        font=("RobotoSlab SemiBold", 13 * -1)
    )

    canvas.create_text(
        150.0,
        460.0,
        anchor="nw",
        text="List Converted Success",
        fill="#000000",
        font=("RobotoSlab SemiBold", 13 * -1)
    )

    canvas.create_text(
        650.0,
        460.0,
        anchor="nw",
        text="List Converted Failed",
        fill="#000000",
        font=("RobotoSlab SemiBold", 13 * -1)
    )

    canvas.create_text(
        20.0,
        660.0,
        anchor="nw",
        text="CREATE THIS PROGRAM BY NONG GEM",
        fill="#0040ff",
        font=("RobotoSlab SemiBold", 18 * -1)
    )

    from tkinter import ttk
    convert_type = ttk.Combobox(window, values=[".png", ".jpg"], state="readonly", width=7)
    convert_type['font'] = ('Arial', 30)  # Adjust the font size as needed
    convert_type.current(0)  # set initial value to "png"
    convert_type.place(x=340, y=20)  # Adjust x and y coordinates as needed


    print("Success Start Program")
    # Later in your conversion function, use the selected value
    # Use output_format in your conversion logic

    window.resizable(False, False)
    window.mainloop()
except Exception as e:
    print(e)
    input()